trigger:
  - main

pool:
  name: azure-devops-agent
  demands:
    - agent.name -equals ec2-agent

variables:
  - group: credentials
  - name: dockerfilePath
    value: './Dockerfile'

steps:
- script: |
    echo "=== Docker Access Test ==="
    whoami
    groups
    docker ps || { echo "Failed to access Docker. Permission denied."; exit 1; }
  displayName: 'Test Docker Access (whoami, groups, docker ps)'

- script: |
    docker --version || { echo "Docker not found. Please install Docker."; exit 1; }
    docker info || { echo "Docker daemon not running."; exit 1; }
  displayName: 'Verify Docker Installation'

- task: Docker@2
  displayName: 'Login to Docker Hub'
  inputs:
    command: 'login'
    containerRegistry: 'docker-hub-connection'

- task: Docker@2
  displayName: 'Build Docker image'
  inputs:
    command: 'build'
    Dockerfile: '$(dockerfilePath)'
    tags: '$(tag)'
    repository: '$(dockerHubUsername)/$(imageName)'

- task: Docker@2
  displayName: 'Push Docker image to Docker Hub'
  inputs:
    command: 'push'
    repository: '$(dockerHubUsername)/$(imageName)'
    tags: '$(tag)'

- task: AzureCLI@2
  displayName: 'Get AKS Service Info'
  inputs:
    azureSubscription: '$(azureSubscription)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az aks get-credentials --resource-group $(resourceGroup) --name $(clusterName) --overwrite-existing
      kubectl get nodes

- task: AzureCLI@2
  displayName: 'Deploy to AKS'
  inputs:
    azureSubscription: '$(azureSubscription)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      git clone https://github.com/KhacThien88/HelmMonolithic
      cd HelmMonolithic
      sudo cp ~/argocd/deploy.sh .
      sudo cp ~/argocd/uninstall.sh .
      ./deploy.sh
      kubectl get pods -n todoapp-test

- task: AzureCLI@2
  displayName: 'Health Check API using GET /tasks'
  inputs:
    azureSubscription: '$(azureSubscription)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      #!/bin/bash
      set -e  # Exit on any error

      # Configuration
      API_URL="https://backend-server.khacthienit.click/tasks"
      EXPECTED_STATUS="200"
      TIMEOUT=10
      RETRY_COUNT=3
      RETRY_DELAY=5

      # Function to perform health check
      health_check() {
        echo "Checking health of API at $API_URL"
        for ((i=1; i<=$RETRY_COUNT; i++)); do
          echo "Attempt $i of $RETRY_COUNT"
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout $TIMEOUT --insecure "$API_URL" || echo "000")
          
          if [ "$HTTP_STATUS" == "$EXPECTED_STATUS" ]; then
            echo "Health check passed: Received HTTP $HTTP_STATUS"
            return 0
          else
            echo "Health check failed: Received HTTP $HTTP_STATUS (expected $EXPECTED_STATUS)"
            if [ $i -lt $RETRY_COUNT ]; then
              echo "Retrying in $RETRY_DELAY seconds..."
              sleep $RETRY_DELAY
            fi
          fi
        done
        
        echo "ERROR: Health check failed after $RETRY_COUNT attempts"
        exit 1
      }

      # Execute health check
      health_check
  condition: succeeded()
      